# Generated by Qodo Gen
import pytest

from serverless.functions.fhelpers import convert_time_string_to_epoch


class TestConvertTimeStringToEpoch:

    # Convert a valid time string with default format to epoch time
    def test_convert_valid_time_string_with_default_format(self):
        # Arrange
        time_string = "Mon, 01 Jan 2023 12:00:00 GMT"
        expected_epoch = 1672574400

        # Act
        result = convert_time_string_to_epoch(time_string)

        # Assert
        assert result == expected_epoch

    # Convert a valid time string with custom format to epoch time
    def test_convert_valid_time_string_with_custom_format(self):
        # Arrange
        time_string = "2023-01-01 12:00:00"
        format_string = "%Y-%m-%d %H:%M:%S"
        expected_epoch = 1672574400

        # Act
        result = convert_time_string_to_epoch(time_string, format_string)

        # Assert
        assert result == expected_epoch

    # Test handling of valid time string with GMT timezone
    def test_valid_time_string_gmt(self):
        # Arrange
        time_string = "Mon, 01 Jan 2023 12:00:00 GMT"
        expected_epoch = 1672574400

        # Act
        result = convert_time_string_to_epoch(time_string)

        # Assert
        assert result == expected_epoch

    # TODO: fix this test test_valid_time_string_est
    # Test handling of valid time string with EST timezone
    # def test_valid_time_string_est(self):
    #     # Arrange
    #     time_string = "Mon, 01 Jan 2023 07:00:00 EST"
    #     expected_epoch = 1672574400  # Same as GMT but adjusted for EST

    #     # Act
    #     result = convert_time_string_to_epoch(time_string)

    #     # Assert
    #     assert result == expected_epoch

    # Test handling of invalid time string format
    def test_invalid_time_string_format(self):
        # Arrange
        time_string = "Invalid Time String"

        # Act & Assert
        with pytest.raises(ValueError, match="Error converting time string to epoch"):
            convert_time_string_to_epoch(time_string)

    # Test handling of naive datetime (no timezone)
    def test_naive_datetime(self):
        # Arrange
        time_string = "2023-01-01 12:00:00"
        format_string = "%Y-%m-%d %H:%M:%S"
        expected_epoch = 1672574400

        # Act
        result = convert_time_string_to_epoch(time_string, format_string)

        # Assert
        assert result == expected_epoch

    # Test handling of future date
    def test_future_date(self):
        # Arrange
        time_string = "Fri, 01 Jan 2100 00:00:00 GMT"
        expected_epoch = 4102444800

        # Act
        result = convert_time_string_to_epoch(time_string)

        # Assert
        assert result == expected_epoch

    # Test handling of epoch boundary
    def test_epoch_boundary(self):
        # Arrange
        time_string = "Thu, 01 Jan 1970 00:00:00 GMT"
        expected_epoch = 0

        # Act
        result = convert_time_string_to_epoch(time_string)

        # Assert
        assert result == expected_epoch

    # Test handling of unsupported timezone
    def test_unsupported_timezone(self):
        # Arrange
        time_string = "Mon, 01 Jan 2023 07:00:00 XYZ"  # XYZ is not a valid timezone

        # Act & Assert
        with pytest.raises(ValueError, match="Error converting time string to epoch"):
            convert_time_string_to_epoch(time_string)
