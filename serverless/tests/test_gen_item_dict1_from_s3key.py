# Generated by Qodo Gen
import pytest

from serverless.functions.fhelpers import gen_item_dict1_from_s3key
from serverless.functions.global_context import global_context

# @pytest.fixture(autouse=True)
# def reset_global_context():
#     """
#     Reset the global_context before each test to avoid test interference.
#     """
#     global_context["batch_id"] = None
#     global_context["img_fprint"] = None
#     global_context["is_debug"] = False


class TestGenItemDict1FromS3key:

    # Correctly parses a valid S3 key in the format "{file_hash}/{client_id}/{batch_id}/{current_date}/{epoch_timestamp}.png"
    def test_valid_s3_key_parsing(self, mocker):
        # Arrange
        mocker.patch("serverless.functions.fhelpers.dyndb_ttl", "1234567890")
        s3_key = "abc123/client001/batch-456/2023-01-01/1672531200.png"
        s3_bucket = "test-bucket"

        # Act
        result = gen_item_dict1_from_s3key(s3_key, s3_bucket)

        # Assert
        assert result["img_fprint"] == "abc123"
        assert result["client_id"] == "client001"
        assert result["batch_id"] == "456"
        assert result["current_date"] == "2023-01-01"
        assert result["upload_ts"] == "1672531200"
        assert (
            result["s3img_key"]
            == "test-bucket/abc123/client001/batch-456/2023-01-01/1672531200.png"
        )
        assert result["op_status"] == "pending"
        assert result["ttl"] == "1234567890"

    # Updates global_context with batch_id, img_fprint, and is_debug values
    def test_global_context_update(self, mocker):
        # Arrange
        mocker.patch("serverless.functions.fhelpers.dyndb_ttl", "1234567890")
        mocker.patch("serverless.functions.fhelpers.global_context", global_context)
        s3_key = "hash789/client123/batch-456/2023-06-30/1688083200.png"
        s3_bucket = "test-bucket"

        # Act
        gen_item_dict1_from_s3key(s3_key, s3_bucket)

        # Assert
        assert global_context["batch_id"] == "456"
        assert global_context["img_fprint"] == "hash789"
        assert global_context["is_debug"] is False

    # Handles S3 keys with "-debug" suffix correctly by setting is_debug to True
    def test_debug_suffix_handling(self, mocker):
        # Arrange
        mocker.patch("serverless.functions.fhelpers.dyndb_ttl", "1234567890")
        mocker.patch(
            "serverless.functions.fhelpers.global_context",
            {
                "batch_id": None,
                "img_fprint": None,
                "is_debug": False,
            },
        )
        log_mock = mocker.patch("serverless.functions.fhelpers.LOG")
        s3_key = "hash123/client456/batch-303/2023-07-15/1689465600-debug.png"
        s3_bucket = "test-bucket"

        # Act
        result = gen_item_dict1_from_s3key(s3_key, s3_bucket)

        # Assert
        from serverless.functions.fhelpers import global_context

        assert global_context["is_debug"] is True
        assert log_mock.info.called
        assert result["upload_ts"] == "1689465600"
        assert result["batch_id"] == "303"

    # Raises ValueError when S3 key has incorrect number of parts (not 5)
    def test_invalid_s3_key_format(self):
        # Arrange
        s3_key = (
            "hash123/client456/batch-303/2023-07-15"  # Missing epoch_timestamp part
        )
        s3_bucket = "test-bucket"

        # Act & Assert
        with pytest.raises(ValueError) as excinfo:
            gen_item_dict1_from_s3key(s3_key, s3_bucket)

        assert "S3 key does not match the expected format" in str(excinfo.value)

        # Test with too many parts
        s3_key = "hash123/client456/batch-303/2023-07-15/1689465600/extra.png"
        with pytest.raises(ValueError) as excinfo:
            gen_item_dict1_from_s3key(s3_key, s3_bucket)

        assert "S3 key does not match the expected format" in str(excinfo.value)

    # Properly removes "batch-" prefix from batch_id if present
    def test_batch_prefix_removal(self, mocker):
        # Arrange
        mocker.patch("serverless.functions.fhelpers.dyndb_ttl", "1234567890")
        mocker.patch(
            "serverless.functions.fhelpers.global_context",
            {
                "batch_id": None,
                "img_fprint": None,
                "is_debug": False,
            },
        )

        # Test with batch- prefix
        s3_key_with_prefix = "hash123/client456/batch-789/2023-08-01/1690934400.png"
        s3_bucket = "test-bucket"

        # Act
        result_with_prefix = gen_item_dict1_from_s3key(s3_key_with_prefix, s3_bucket)

        # Assert
        assert result_with_prefix["batch_id"] == "789"

        # Test without batch- prefix
        s3_key_without_prefix = "hash123/client456/789/2023-08-01/1690934400.png"

        # Act
        result_without_prefix = gen_item_dict1_from_s3key(
            s3_key_without_prefix, s3_bucket
        )

        # Assert
        assert result_without_prefix["batch_id"] == "789"
