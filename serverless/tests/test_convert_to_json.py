# Generated by Qodo Gen
import json

import pytest

from serverless.functions.fhelpers import convert_to_json


class TestConvertToJson:

    # Convert a simple dictionary to JSON string
    def test_convert_simple_dict_to_json(self):
        # Arrange
        data = {"name": "John", "age": 30, "city": "New York"}

        # Act
        result = convert_to_json(data)

        # Assert
        expected = json.dumps(data, indent=4)
        assert result == expected
        assert json.loads(result) == data

    # Convert a list of values to JSON string
    def test_convert_list_to_json(self):
        # Arrange
        data = [1, "test", 3.14, True, None]

        # Act
        result = convert_to_json(data)

        # Assert
        expected = json.dumps(data, indent=4)
        assert result == expected
        assert json.loads(result) == data

    # Convert nested data structures (dicts within dicts) to JSON string
    def test_convert_nested_structures_to_json(self):
        # Arrange
        data = {
            "person": {
                "name": "Alice",
                "address": {"street": "123 Main St", "city": "Boston", "zip": "02101"},
                "hobbies": ["reading", "hiking", {"name": "photography", "years": 5}],
            }
        }

        # Act
        result = convert_to_json(data)

        # Assert
        expected = json.dumps(data, indent=4)
        assert result == expected
        assert json.loads(result) == data

    # Handle empty data structures (empty dict, empty list)
    def test_convert_empty_structures_to_json(self):
        # Arrange
        empty_dict = {}
        empty_list = []

        # Act
        dict_result = convert_to_json(empty_dict)
        list_result = convert_to_json(empty_list)

        # Assert
        assert dict_result == json.dumps({}, indent=4)
        assert list_result == json.dumps([], indent=4)
        assert json.loads(dict_result) == empty_dict
        assert json.loads(list_result) == empty_list

    # Handle None value as input
    def test_convert_none_to_json(self):
        # Arrange
        data = None

        # Act
        result = convert_to_json(data)

        # Assert
        expected = json.dumps(None, indent=4)
        assert result == expected
        assert result == "null"

    # TODO: fix the test test_handle_circular_references
    # Handle circular references in data structure
    # def test_handle_circular_references(self):
    #     # Arrange
    #     data = {"name": "Circular"}
    #     data["self_reference"] = data  # Create circular reference

    #     # Act
    #     result = convert_to_json(data)

    #     # Assert
    #     assert result is not None  # Function should return a valid JSON string
    #     assert "<circular-reference: dict>" in result  # Placeholder for circular reference
